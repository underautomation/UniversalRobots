//              WARNING
// This file is an empty shell containing only public C# items.
// The internal code is hidden; to access it, you need to obtain a Source licence of the library.

using System.Collections.ObjectModel;

namespace Rtde {

	public class RtdeOutputsDescription {


		public RtdeOutputDataDescription Get(RtdeOutputData data)
		{
			// Source is hidden, a Source licence is needed to access internal code...
			return default;
		}


		public ReadOnlyCollection<RtdeOutputDataDescription> Items { get; }

		/// <summary>
		/// Time elapsed since the controller was started [s]
		/// </summary>
		public RtdeOutputDataDescription Timestamp { get; }

		/// <summary>
		/// Target joint positions
		/// </summary>
		public RtdeOutputDataDescription TargetQ { get; }

		/// <summary>
		/// Target joint velocities
		/// </summary>
		public RtdeOutputDataDescription TargetQd { get; }

		/// <summary>
		/// Target joint accelerations
		/// </summary>
		public RtdeOutputDataDescription TargetQdd { get; }

		/// <summary>
		/// Target joint currents
		/// </summary>
		public RtdeOutputDataDescription TargetCurrent { get; }

		/// <summary>
		/// Target joint moments (torques)
		/// </summary>
		public RtdeOutputDataDescription TargetMoment { get; }

		/// <summary>
		/// Actual joint positions
		/// </summary>
		public RtdeOutputDataDescription ActualQ { get; }

		/// <summary>
		/// Actual joint velocities
		/// </summary>
		public RtdeOutputDataDescription ActualQd { get; }

		/// <summary>
		/// Actual joint currents
		/// </summary>
		public RtdeOutputDataDescription ActualCurrent { get; }

		/// <summary>
		/// Joint control currents
		/// </summary>
		public RtdeOutputDataDescription JointControlOutput { get; }

		/// <summary>
		/// Actual Cartesian coordinates of the tool: (x,y,z,rx,ry,rz), where rx, ry and rz is a rotation vector representation of the tool orientation
		/// </summary>
		public RtdeOutputDataDescription ActualTcpPose { get; }

		/// <summary>
		/// Actual speed of the tool given in Cartesian coordinates. The speed is given in [m/s] and the rotational part of the TCP speed (rx, ry, rz) is the angular velocity given in [rad/s]
		/// </summary>
		public RtdeOutputDataDescription ActualTcpSpeed { get; }

		/// <summary>
		/// Generalized forces in the TCP. It compensates the measurement for forces and torques generated by the�payload
		/// </summary>
		public RtdeOutputDataDescription ActualTcpForce { get; }

		/// <summary>
		/// Target Cartesian coordinates of the tool: (x,y,z,rx,ry,rz), where rx, ry and rz is a rotation vector representation of the tool orientation
		/// </summary>
		public RtdeOutputDataDescription TargetTcpPose { get; }

		/// <summary>
		/// Target speed of the tool given in Cartesian coordinates.�The speed is given in [m/s] and the rotational part of the TCP speed (rx, ry, rz) is the angular velocity given in [rad/s]
		/// </summary>
		public RtdeOutputDataDescription TargetTcpSpeed { get; }

		/// <summary>
		/// Current state of the digital inputs.�0-7: Standard, 8-15: Configurable, 16-17: Tool
		/// </summary>
		public RtdeOutputDataDescription ActualDigitalInputBits { get; }

		/// <summary>
		/// Temperature of each joint in degrees Celsius
		/// </summary>
		public RtdeOutputDataDescription JointTemperatures { get; }

		/// <summary>
		/// Controller real-time thread execution time
		/// </summary>
		public RtdeOutputDataDescription ActualExecutionTime { get; }

		/// <summary>
		/// Robot mode
		/// </summary>
		public RtdeOutputDataDescription RobotMode { get; }

		/// <summary>
		/// Joint control modes
		/// </summary>
		public RtdeOutputDataDescription JointMode { get; }

		/// <summary>
		/// Safety mode
		/// </summary>
		public RtdeOutputDataDescription SafetyMode { get; }

		/// <summary>
		/// Safety status
		/// </summary>
		public RtdeOutputDataDescription SafetyStatus { get; }

		/// <summary>
		/// Tool x, y and z accelerometer values
		/// </summary>
		public RtdeOutputDataDescription ActualToolAccelerometer { get; }

		/// <summary>
		/// Speed scaling of the trajectory limiter
		/// </summary>
		public RtdeOutputDataDescription SpeedScaling { get; }

		/// <summary>
		/// Target speed fraction
		/// </summary>
		public RtdeOutputDataDescription TargetSpeedFraction { get; }

		/// <summary>
		/// Norm of Cartesian linear momentum
		/// </summary>
		public RtdeOutputDataDescription ActualMomentum { get; }

		/// <summary>
		/// Safety Control Board: Main voltage
		/// </summary>
		public RtdeOutputDataDescription ActualMainVoltage { get; }

		/// <summary>
		/// Safety Control Board: Robot voltage (48V)
		/// </summary>
		public RtdeOutputDataDescription ActualRobotVoltage { get; }

		/// <summary>
		/// Safety Control Board: Robot current
		/// </summary>
		public RtdeOutputDataDescription ActualRobotCurrent { get; }

		/// <summary>
		/// Actual joint voltages
		/// </summary>
		public RtdeOutputDataDescription ActualJointVoltage { get; }

		/// <summary>
		/// Current state of the digital outputs.�0-7: Standard, 8-15: Configurable, 16-17: Tool
		/// </summary>
		public RtdeOutputDataDescription ActualDigitalOutputBits { get; }

		/// <summary>
		/// Program state
		/// </summary>
		public RtdeOutputDataDescription RuntimeState { get; }

		/// <summary>
		/// Position of robot elbow in Cartesian Base Coordinates
		/// </summary>
		public RtdeOutputDataDescription ElbowPosition { get; }

		/// <summary>
		/// Velocity of robot elbow in Cartesian Base Coordinates
		/// </summary>
		public RtdeOutputDataDescription ElbowVelocity { get; }

		/// <summary>
		/// Bits 0-3:� Is power on | Is program running | Is teach button pressed | Is power button pressed
		/// </summary>
		public RtdeOutputDataDescription RobotStatusBits { get; }

		/// <summary>
		/// Bits 0-10: Is normal mode | Is reduced mode | Is protective stopped | Is recovery mode |�Is safeguard stopped |�Is system emergency stopped |�Is robot emergency stopped |�Is emergency stopped |�Is violation |�Is fault |�Is stopped due to safety
		/// </summary>
		public RtdeOutputDataDescription SafetyStatusBits { get; }

		/// <summary>
		/// Bits 0-3: analog input 0 | analog input 1 | analog output 0 |�analog output 1, {0=current[mA], 1=voltage[V]}
		/// </summary>
		public RtdeOutputDataDescription AnalogIOTypes { get; }

		/// <summary>
		/// Standard analog input 0 [mA or V]
		/// </summary>
		public RtdeOutputDataDescription StandardAnalogInput0 { get; }

		/// <summary>
		/// Standard analog input 1 [mA or V]
		/// </summary>
		public RtdeOutputDataDescription StandardAnalogInput1 { get; }

		/// <summary>
		/// Standard analog output 0 [mA or V]
		/// </summary>
		public RtdeOutputDataDescription StandardAnalogOutput0 { get; }

		/// <summary>
		/// Standard analog output 1 [mA or V]
		/// </summary>
		public RtdeOutputDataDescription StandardAnalogOutput1 { get; }

		/// <summary>
		/// I/O current [mA]
		/// </summary>
		public RtdeOutputDataDescription IOCurrent { get; }

		/// <summary>
		/// Euromap67 input bits
		/// </summary>
		public RtdeOutputDataDescription Euromap67InputBits { get; }

		/// <summary>
		/// Euromap67 output bits
		/// </summary>
		public RtdeOutputDataDescription Euromap67OutputBits { get; }

		/// <summary>
		/// Euromap 24V voltage [V]
		/// </summary>
		public RtdeOutputDataDescription Euromap67_24VVoltage { get; }

		/// <summary>
		/// Euromap 24V current [mA]
		/// </summary>
		public RtdeOutputDataDescription Euromap67_24VCurrent { get; }

		/// <summary>
		/// Tool mode
		/// </summary>
		public RtdeOutputDataDescription ToolMode { get; }

		/// <summary>
		/// Output domain {0=current[mA], 1=voltage[V]} Bits 0-1: tool_analog_input_0 | tool_analog_input_1
		/// </summary>
		public RtdeOutputDataDescription ToolAnalogInputTypes { get; }

		/// <summary>
		/// Tool analog input 0 [mA or V]
		/// </summary>
		public RtdeOutputDataDescription ToolAnalogInput0 { get; }

		/// <summary>
		/// Tool analog input 1 [mA or V]
		/// </summary>
		public RtdeOutputDataDescription ToolAnalogInput1 { get; }

		/// <summary>
		/// Tool output voltage [V]
		/// </summary>
		public RtdeOutputDataDescription ToolOutputVoltage { get; }

		/// <summary>
		/// Tool current [mA]
		/// </summary>
		public RtdeOutputDataDescription ToolOutputCurrent { get; }

		/// <summary>
		/// Tool temperature in degrees Celsius
		/// </summary>
		public RtdeOutputDataDescription ToolTemperature { get; }

		/// <summary>
		/// TCP force scalar [N]
		/// </summary>
		public RtdeOutputDataDescription TcpForceScalar { get; }

		/// <summary>
		/// General purpose bits
		/// </summary>
		public RtdeOutputDataDescription OutputBitRegisters0To31 { get; }

		/// <summary>
		/// General purpose bits
		/// </summary>
		public RtdeOutputDataDescription OutputBitRegisters32To63 { get; }

		/// <summary>
		/// 64 general purpose bits. X: [64..127] - The upper range of the boolean output registers can be used by external RTDE clients (i.e URCAPS).
		/// </summary>
		public RtdeOutputDataDescription OutputBitRegisters { get; }

		/// <summary>
		/// 48 general purpose integer registers. X: [0..23] - The lower range of the integer output registers is reserved for FieldBus/PLC interface usage. X: [24..47] - The upper range of the integer output registers can be used by external RTDE clients (i.e URCAPS).
		/// </summary>
		public RtdeOutputDataDescription OutputIntRegisters { get; }

		/// <summary>
		/// 48 general purpose double registers. X: [0..23] - The lower range of the double output registers is reserved for FieldBus/PLC interface usage. X: [24..47] - The upper range of the double output registers can be used by external RTDE clients (i.e URCAPS).
		/// </summary>
		public RtdeOutputDataDescription OutputDoubleRegisters { get; }

		/// <summary>
		/// General purpose bits (input read back). This range of the boolean output registers is reserved for FieldBus/PLC interface usage.
		/// </summary>
		public RtdeOutputDataDescription InputBitRegisters0To31 { get; }

		/// <summary>
		/// General purpose bits (input read back), This range of the boolean output registers is reserved for FieldBus/PLC interface usage.
		/// </summary>
		public RtdeOutputDataDescription InputBitRegisters32To63 { get; }

		/// <summary>
		/// �64 general purpose bits, X: [64..127] - The upper range of the boolean output registers can be used by external RTDE clients (i.e URCAPS).
		/// </summary>
		public RtdeOutputDataDescription InputBitRegisters { get; }

		/// <summary>
		/// 48 general purpose integer registers. X: [0..23] - The lower range of the integer input registers is reserved for FieldBus/PLC interface usage. X: [24..47] - The upper range of the integer input registers can be used by external RTDE clients (i.e URCAPS).
		/// </summary>
		public RtdeOutputDataDescription InputIntRegisters { get; }

		/// <summary>
		/// �48 general purpose double registers. X: [0..23] - The lower range of the double input registers is reserved for FieldBus/PLC interface usage. X: [24..47] - The upper range of the double input registers can be used by external RTDE clients (i.e URCAPS).
		/// </summary>
		public RtdeOutputDataDescription InputDoubleRegisters { get; }

		/// <summary>
		/// The current output mode
		/// </summary>
		public RtdeOutputDataDescription ToolOutputMode { get; }

		/// <summary>
		/// The current mode of digital output 0
		/// </summary>
		public RtdeOutputDataDescription ToolDigitalOutput0mode { get; }

		/// <summary>
		/// The current mode of digital output 1
		/// </summary>
		public RtdeOutputDataDescription ToolDigitalOutput1Mode { get; }

		/// <summary>
		/// Payload mass Kg
		/// </summary>
		public RtdeOutputDataDescription Payload { get; }

		/// <summary>
		/// Payload Center of Gravity (CoGx, CoGy, CoGz) m
		/// </summary>
		public RtdeOutputDataDescription PayloadCOG { get; }

		/// <summary>
		/// Payload inertia matrix elements (Ixx,Iyy,Izz,Ixy,Ixz,Iyz] expressed in kg*m^2
		/// </summary>
		public RtdeOutputDataDescription PayloadInertia { get; }

		/// <summary>
		/// Script line number that is actually in control of the robot given the robot is locked by one of the threads in the script. If no thread is locking the robot this field is set to '0'. Script line number should not be confused with program tree line number displayed on polyscope.
		/// </summary>
		public RtdeOutputDataDescription ScriptControlLine { get; }

		/// <summary>
		/// Raw force and torque measurement, not compensated for forces and torques caused by the�payload
		/// </summary>
		public RtdeOutputDataDescription FTRawWrench { get; }
	}
}
